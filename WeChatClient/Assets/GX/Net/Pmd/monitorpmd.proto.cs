//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: monitorpmd.proto

using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace Pmd
{
	/// <summary>
	/// TODO
	/// </summary>
	public partial class Monitor
	{
		public enum Param
		{
			StartUpGameRequestMonitorPmd_C = 1,
			StartUpGameReturnMonitorPmd_S = 2,
			SupportGameZoneListSdkPmd_C = 3,
			RefreshServerStateListMonitorPmd_S = 4,
			RefreshServerStateMonitorPmd_CSC = 5
		}
	}
	/// <summary>
	/// 区服务器请求连接登陆服务器的第一个消息
	/// </summary>
	public partial class StartUpGameRequestMonitorPmd_C
	{
		public string key { get; set; }
		public uint version { get; set; }
		/// <summary>
		/// 压缩算法
		/// </summary>
		public string compress { get; set; }
		/// <summary>
		/// 加密算法
		/// </summary>
		public string encrypt { get; set; }
		/// <summary>
		/// 加密key
		/// </summary>
		public string encryptkey { get; set; }
	}
	/// <summary>
	/// 返回给区服务器的连接验证状态,这里也发送区信息的原因是考虑游戏服务器可能连接名字验证服务器比连接登陆服务器快
	/// </summary>
	public partial class StartUpGameReturnMonitorPmd_S
	{
		/// <summary>
		/// 返回成功标志
		/// </summary>
		public bool ret { get; set; }
		/// <summary>
		/// 返回描述
		/// </summary>
		public string retdesc { get; set; }
	}
	/// <summary>
	/// 希望监控的游戏区服
	/// </summary>
	public partial class SupportGameZoneListSdkPmd_C
	{
		private List<Pmd.GameZoneInfo> m_gamezonelist;
		/// <summary>
		/// 游戏类型
		/// </summary>
		[DebuggerNonUserCode]
		public List<Pmd.GameZoneInfo> gamezonelist
		{
			get { if (this.m_gamezonelist == null) m_gamezonelist = new List<Pmd.GameZoneInfo>(); return m_gamezonelist; }
			set { m_gamezonelist = value; }
		}
	}
	/// <summary>
	/// 服务器信息
	/// </summary>
	public partial class ServerState
	{
		public uint id { get; set; }
		/// <summary>
		/// TaskType
		/// </summary>
		public uint type { get; set; }
		/// <summary>
		/// 当前状态0关闭,1开启
		/// </summary>
		public uint state { get; set; }
		/// <summary>
		/// id
		/// </summary>
		public string addr { get; set; }
		/// <summary>
		/// 服务器名称
		/// </summary>
		public uint onlinenum { get; set; }
		/// <summary>
		/// 服务器名称
		/// </summary>
		public string name { get; set; }
	}
	public partial class GameZoneServerState
	{
		private Pmd.GameZoneInfo m_gamezone;
		/// <summary>
		/// 游戏类型
		/// </summary>
		[DebuggerNonUserCode]
		public Pmd.GameZoneInfo gamezone
		{
			get { if (this.m_gamezone == null) m_gamezone = new Pmd.GameZoneInfo(); return m_gamezone; }
			set { m_gamezone = value; }
		}
		private List<Pmd.ServerState> m_statelist;
		/// <summary>
		/// 状态
		/// </summary>
		[DebuggerNonUserCode]
		public List<Pmd.ServerState> statelist
		{
			get { if (this.m_statelist == null) m_statelist = new List<Pmd.ServerState>(); return m_statelist; }
			set { m_statelist = value; }
		}
	}
	/// <summary>
	/// 刷新服务器状态
	/// </summary>
	public partial class RefreshServerStateListMonitorPmd_S
	{
		private List<Pmd.GameZoneServerState> m_statelist;
		/// <summary>
		/// 服务器列表
		/// </summary>
		[DebuggerNonUserCode]
		public List<Pmd.GameZoneServerState> statelist
		{
			get { if (this.m_statelist == null) m_statelist = new List<Pmd.GameZoneServerState>(); return m_statelist; }
			set { m_statelist = value; }
		}
		/// <summary>
		/// 是否需要重置列表
		/// </summary>
		public bool reset { get; set; }
	}
	/// <summary>
	/// 刷新服务器状态
	/// </summary>
	public partial class RefreshServerStateMonitorPmd_CSC
	{
		private Pmd.GameZoneServerState m_state;
		/// <summary>
		/// 服务器列表
		/// </summary>
		[DebuggerNonUserCode]
		public Pmd.GameZoneServerState state
		{
			get { if (this.m_state == null) m_state = new Pmd.GameZoneServerState(); return m_state; }
			set { m_state = value; }
		}
		/// <summary>
		/// 是否需要重置列表
		/// </summary>
		public bool reset { get; set; }
	}
}
